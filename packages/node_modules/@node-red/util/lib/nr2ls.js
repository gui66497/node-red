var util = require("util");
var http = require('http');

//transform  s=>[s]  s.a=>[s][a]
function transform(p) {
    let str = "";
    p.split(".").forEach(function (t) {
        str += `[${t}]`
    });
    return str;
}
var ops = {
    'eq': function(p, v){p = transform(p);return util.format('%s == "%s"', p, v);},
    'neq': function(p, v){p = transform(p);return util.format('%s != "%s"', p, v);},
    'lt': function(p, v){p = transform(p);return util.format('%s < "%s"', p, v);},
    'lte': function(p, v){p = transform(p);return util.format('%s <= "%s"', p, v);},
    'gt': function(p, v){p = transform(p);return util.format('%s > "%s"', p, v);},
    'gte': function(p, v){p = transform(p);return util.format('%s >= "%s"', p, v);},
    'btwn': function(p, v, v2){p = transform(p);return util.format('%s >= %s and %s <= %s', p, v, p, v2);},
    'cont': function(p, v){p = transform(p);return util.format('"%s" in %s', v, p);},
    'regex': function(p, v){p = transform(p);return util.format('%s =~ /%s/', p, v);},
    'true': function(p, v){p = transform(p);return util.format('%s', p);},
    'false': function(p, v){p = transform(p);return util.format('!%s', p);},
    'null': function(p, v){p = transform(p);return util.format('!%s', p);},
    'nnull': function(p, v){p = transform(p);return util.format('%s', p);},
    'else': function(p, v){return '1 == 1';}
};

function getFlow(flowId) {
    var reqOptions = {
        host: "localhost",
        port: 1880,
        path: "/flow/" + flowId,
        method: 'GET'
    };
    var flowReq = http.request(reqOptions, function(flowRes) {
        var data = [];
        flowRes.on('close', function (error) {});
        flowRes.on('data', function (chunk) {
            data.push(chunk);
        });
        flowRes.on('end', function() {
            var results = data.length > 0 ? JSON.parse(data.join("")) : {};
            //console.log(JSON.stringify(results, null, 3));
            generate(null, results);
        });

    });
    flowReq.on('error', function(e) {
        generate(new Error('Problem with flow request: ' + e.message), {});
    });
    flowReq.end();
}

//node排序规则  自上而下 从左到右
let compare = function (obj1, obj2) {
    let val1 = obj1.x + obj1.y;
    let val2 = obj2.x + obj2.y;
    return val1 - val2;
};

function generate(flow) {
    //var outFileName = confName || (flow.label.toLowerCase() + ".conf");

    // parse flow
    var components = {
        "in": {name: "input", elements:{}},
        "flt": {name: "filter", elements:{}},
        "out": {name: "output", elements:{}}
    };
    var otherNodes = [];


    //排序
    flow.nodes.sort(compare);
    flow.nodes.forEach(function(node) {
        var type = node.type.split("-");

        // handle logstash nodes
        if (type.length === 3 && type[0] === "ls") {
            var component = {"_name": type[2], "_rule": []};
            for (var prop in node) {
                if (/^ls_/.test(prop) && node[prop]) {
                    component[prop.substring(3)] = node[prop];
                } else if (prop === "name") {
                    component._comment = node[prop];
                }
            }
            components[type[1]].elements[node.id] = component;
        }
        // keep for the second pass
        else {
            otherNodes.push(node);
        }
    });

    // Second pass to handle core nodes
    otherNodes.forEach(function(node) {
        if (node.type === "switch") {
            var rules = node.rules;

            rules.forEach(function(rule, index) {
                var wire = node.wires[index][0];
                var comp = components.flt.elements[wire] || components.out.elements[wire];
                if (wire && comp) {
                    var args = [node.property, rule.v];
                    if (rule.v2) args.push(rule.v2);

                    if (ops[rule.t]) {
                        comp._rule.push(ops[rule.t].apply(null, args));
                    }
                }
            });
        }
    });
    //console.log(JSON.stringify(components, null, 2));

    function __generateElement(lines, indent, element) {
        lines.push(util.format(indent + "  %s {", element._name));
        for (var prop in element) {
            if (!/^_/.test(prop) && element[prop]) {
                if (/^\[/.test(element[prop]) || /^\{/.test(element[prop])) {
                    lines.push(util.format("      %s => %s", prop, element[prop]));
                } else {
                    lines.push(util.format("      %s => \"%s\"", prop, element[prop]));
                }
            }
        }
        lines.push(util.format(indent + "  }"));
    }

    // 没有考虑元素的先后执行顺序 这里按照自上而下 从左到右的规则进行排序
    var lines = [];
    ["in", "flt", "out"].forEach(function(sectionId) {
        var section = components[sectionId];
        lines.push(util.format("%s {", section.name));
        for (var elemId in section.elements) {
            var element = section.elements[elemId];
            var indent = "";
            if (element._rule.length > 0) {
                element._rule.forEach(function(_rule) {
                    lines.push(util.format("  if %s {", _rule));
                    indent = "  ";
                    lines.push(util.format("    # " + element._comment));
                    __generateElement(lines, indent, element);
                    lines.push("  }");
                });
            }
            else {
                lines.push(util.format("  # " + element._comment));
                __generateElement(lines, indent, element);
            }
        }
        lines.push(util.format("}"));
    });

    return lines.join("\n");
    //fs.writeFileSync(outFileName, lines.join("\n"));
}

module.exports = {
    getFlow: getFlow,
    generate: generate
};
